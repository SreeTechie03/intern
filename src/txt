


///LANDING PAGE

import React from 'react';
import { GraduationCap, Lightbulb, Target, Trophy, Rocket, Users, Mail, Linkedin, Github } from 'lucide-react';

function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      {/* Navigation */}
      <nav className="absolute top-0 left-0 right-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <GraduationCap className="w-8 h-8 text-blue-400" />
              <span className="text-white font-bold text-xl">SmartEd</span>
            </div>
            <div className="hidden md:flex space-x-8">
              <a href="#about" className="text-gray-300 hover:text-white transition-colors duration-300">About</a>
              <a href="#features" className="text-gray-300 hover:text-white transition-colors duration-300">Features</a>
              <a href="#contact" className="text-gray-300 hover:text-white transition-colors duration-300">Contact</a>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center px-4 sm:px-6 lg:px-8">
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute inset-0 bg-[url('https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&q=80')] bg-cover bg-center opacity-10"></div>
        </div>
        <div className="relative max-w-4xl mx-auto text-center">
          <h1 className="text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 text-transparent bg-clip-text animate-gradient">
            Welcome to SmartEd Innovations
          </h1>
          <p className="text-xl md:text-2xl text-gray-300 mb-12 leading-relaxed">
            Transforming education through cutting-edge technology and innovative learning solutions.
          </p>
          <div className="flex flex-col sm:flex-row gap-6 justify-center">
            <button className="px-8 py-4 bg-blue-500 text-white rounded-lg transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-blue-500/50">
              Get Started
            </button>
            <button className="px-8 py-4 bg-transparent border-2 border-blue-400 text-blue-400 rounded-lg transform hover:scale-105 transition-all duration-300">
              Learn More
            </button>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-slate-900/50 backdrop-blur-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl md:text-4xl font-bold text-center mb-16 text-white">Why Choose SmartEd?</h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              { icon: Lightbulb, title: "Innovative Learning", color: "blue" },
              { icon: Target, title: "Personalized Path", color: "purple" },
              { icon: Trophy, title: "Industry Recognition", color: "pink" },
              { icon: Rocket, title: "Fast-Track Growth", color: "orange" }
            ].map((feature, index) => (
              <div key={index} className="bg-slate-800/50 backdrop-blur rounded-xl p-6 transform hover:-translate-y-2 transition-all duration-300 border border-slate-700/50 hover:border-slate-600">
                <div className={`w-12 h-12 rounded-lg bg-${feature.color}-500/20 flex items-center justify-center mb-4`}>
                  <feature.icon className={`w-6 h-6 text-${feature.color}-400`} />
                </div>
                <h3 className="text-xl font-semibold text-white mb-3">{feature.title}</h3>
                <p className="text-gray-400">Experience world-class education with our cutting-edge platform and expert instructors.</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* About Section */}
      <section id="about" className="py-20 relative overflow-hidden">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          <div className="bg-slate-800/70 backdrop-blur-xl rounded-2xl p-8 md:p-12 border border-slate-700/50">
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div>
                <h2 className="text-3xl md:text-4xl font-bold text-white mb-6">About SmartEd Innovations</h2>
                <p className="text-gray-300 leading-relaxed mb-6">
                  We're revolutionizing education by combining cutting-edge technology with proven learning methodologies. Our platform adapts to each student's unique learning style, ensuring optimal results.
                </p>
                <div className="flex items-center gap-4">
                  <div className="flex -space-x-4">
                    {[1, 2, 3, 4].map((i) => (
                      <img
                        key={i}
                        src={`https://i.pravatar.cc/40?img=${i}`}
                        alt={`Team member ${i}`}
                        className="w-10 h-10 rounded-full border-2 border-slate-800"
                      />
                    ))}
                  </div>
                  <span className="text-gray-400">Join our growing community</span>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                {[
                  { number: "15K+", label: "Students" },
                  { number: "95%", label: "Success Rate" },
                  { number: "200+", label: "Courses" },
                  { number: "50+", label: "Countries" }
                ].map((stat, index) => (
                  <div key={index} className="bg-slate-700/30 rounded-lg p-6 text-center">
                    <div className="text-2xl font-bold text-blue-400 mb-2">{stat.number}</div>
                    <div className="text-gray-400">{stat.label}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-slate-900/80 backdrop-blur-lg border-t border-slate-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="grid md:grid-cols-4 gap-8">
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <GraduationCap className="w-6 h-6 text-blue-400" />
                <span className="text-white font-bold">SmartEd</span>
              </div>
              <p className="text-gray-400 text-sm">
                Transforming education through innovation and technology.
              </p>
            </div>
            <div>
              <h3 className="text-white font-semibold mb-4">Company</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">About Us</a></li>
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Careers</a></li>
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Partners</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-white font-semibold mb-4">Resources</h3>
              <ul className="space-y-2">
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Documentation</a></li>
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Help Center</a></li>
                <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Blog</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-white font-semibold mb-4">Connect</h3>
              <div className="flex space-x-4">
                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                  <Linkedin className="w-5 h-5" />
                </a>
                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                  <Github className="w-5 h-5" />
                </a>
                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                  <Mail className="w-5 h-5" />
                </a>
              </div>
            </div>
          </div>
          <div className="mt-12 pt-8 border-t border-slate-800 text-center">
            <p className="text-gray-400">Â© {new Date().getFullYear()} SmartEd Innovations. All rights reserved.</p>
          </div>
        </div>
      </footer>

      {/* Custom Styles */}
      <style jsx>{`
        @keyframes gradient {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        .animate-gradient {
          background-size: 200% auto;
          animation: gradient 4s linear infinite;
        }
      `}</style>
    </div>
  );
}

export default Home;




//Teams

import React, { useState, useEffect } from 'react';
import { Search, Plus, Trash2, Edit3, Users, DollarSign, Wallet, HourglassIcon, TrendingUp, X, Calendar, UserPlus, Building2, Target, AlertTriangle } from 'lucide-react';

const months = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];

const mockUsers = [
  { id: 1, name: 'John Doe' },
  { id: 2, name: 'Jane Smith' },
  { id: 3, name: 'Mike Johnson' },
  { id: 4, name: 'Sarah Williams' },
  { id: 5, name: 'Alex Thompson' },
  { id: 6, name: 'Emily Davis' },
  { id: 7, name: 'Chris Wilson' },
  { id: 8, name: 'Lisa Anderson' },
];

function AddTeamModal({ isOpen, onClose, onAddTeam }) {
  const [formData, setFormData] = useState({
    name: '',
    manager: '',
    members: [],
    targetMonth: '',
    targetAmount: '',
  });

  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 3;

  const handleSubmit = (e) => {
    e.preventDefault();
    onAddTeam({
      name: formData.name,
      memberCount: formData.members.length,
      revenue: parseFloat(formData.targetAmount) || 0,
      totalPayments: 0,
      receivedPayments: 0,
      pending: parseFloat(formData.targetAmount) || 0,
    });
    setFormData({
      name: '',
      manager: '',
      members: [],
      targetMonth: '',
      targetAmount: '',
    });
    setCurrentStep(1);
    onClose();
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center space-x-2 mb-8">
      {[1, 2, 3].map((step) => (
        <div
          key={step}
          className={`flex items-center ${step !== 3 ? 'w-full' : ''}`}
        >
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center ${
              step === currentStep
                ? 'bg-blue-600 text-white'
                : step < currentStep
                ? 'bg-green-500 text-white'
                : 'bg-gray-200 text-gray-600'
            }`}
          >
            {step < currentStep ? 'â' : step}
          </div>
          {step !== 3 && (
            <div
              className={`h-1 w-full ${
                step < currentStep ? 'bg-green-500' : 'bg-gray-200'
              }`}
            />
          )}
        </div>
      ))}
    </div>
  );

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="relative">
              <Building2 className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <input
                type="text"
                required
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="Enter team name"
              />
            </div>
            <div className="relative">
              <Users className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <select
                required
                value={formData.manager}
                onChange={(e) => setFormData({ ...formData, manager: e.target.value })}
                className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none transition-all duration-200"
              >
                <option value="">Select team manager</option>
                {mockUsers.map((user) => (
                  <option key={user.id} value={user.id}>
                    {user.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        );
      case 2:
        return (
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-xl p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold flex items-center gap-2">
                  <UserPlus className="w-5 h-5" />
                  Team Members
                </h3>
                <span className="text-sm text-gray-500">
                  Selected: {formData.members.length}
                </span>
              </div>
              <select
                multiple
                value={formData.members}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    members: Array.from(e.target.selectedOptions, (option) => option.value),
                  })
                }
                className="w-full px-4 py-3 bg-white border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 h-48"
              >
                {mockUsers.map((user) => (
                  <option key={user.id} value={user.id}>
                    {user.name}
                  </option>
                ))}
              </select>
              <p className="mt-2 text-sm text-gray-500 flex items-center gap-1">
                <span className="text-blue-500">Tip:</span>
                Hold Ctrl/Cmd to select multiple members
              </p>
            </div>
          </div>
        );
      case 3:
        return (
          <div className="space-y-6">
            <div className="relative">
              <Calendar className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <select
                required
                value={formData.targetMonth}
                onChange={(e) => setFormData({ ...formData, targetMonth: e.target.value })}
                className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none transition-all duration-200"
              >
                <option value="">Select target month</option>
                {months.map((month) => (
                  <option key={month} value={month}>
                    {month}
                  </option>
                ))}
              </select>
            </div>
            <div className="relative">
              <Target className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <div className="relative">
                <DollarSign className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
                <input
                  type="number"
                  required
                  min="0"
                  step="1000"
                  value={formData.targetAmount}
                  onChange={(e) => setFormData({ ...formData, targetAmount: e.target.value })}
                  className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  placeholder="Enter target amount"
                />
              </div>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-fadeIn">
      <div className="bg-white rounded-2xl max-w-xl w-full p-6 relative shadow-2xl animate-slideUp">
        <button
          onClick={onClose}
          className="absolute -top-4 -right-4 bg-white text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-50 rounded-full shadow-lg"
        >
          <X className="w-5 h-5" />
        </button>

        <div className="text-center mb-6">
          <div className="inline-flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mb-4">
            <Users className="w-6 h-6 text-blue-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900">Create New Team</h2>
          <p className="text-gray-500 mt-1">Step {currentStep} of {totalSteps}</p>
        </div>

        {renderStepIndicator()}

        <form onSubmit={handleSubmit} className="space-y-6">
          {renderStepContent()}

          <div className="flex justify-between items-center pt-6 border-t border-gray-100">
            <button
              type="button"
              onClick={prevStep}
              className={`px-6 py-2.5 text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-all duration-200 font-medium ${
                currentStep === 1 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              disabled={currentStep === 1}
            >
              Previous
            </button>
            <div className="flex gap-3">
              <button
                type="button"
                onClick={onClose}
                className="px-6 py-2.5 text-gray-600 hover:text-gray-800 transition-all duration-200"
              >
                Cancel
              </button>
              {currentStep === totalSteps ? (
                <button
                  type="submit"
                  className="px-6 py-2.5 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
                >
                  Create Team
                </button>
              ) : (
                <button
                  type="button"
                  onClick={nextStep}
                  className="px-6 py-2.5 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
                >
                  Continue
                </button>
              )}
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

function ModifyTeamModal({ isOpen, onClose, onModify, team }) {
  const [formData, setFormData] = useState({
    name: '',
    manager: '',
    members: [],
    targetMonth: '',
    targetAmount: '',
  });

  useEffect(() => {
    if (team) {
      setFormData({
        name: team.name,
        manager: team.manager || '',
        members: team.members || [],
        targetMonth: team.targetMonth || '',
        targetAmount: String(team.revenue) || '',
      });
    }
  }, [team]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onModify(team.id, {
      name: formData.name,
      memberCount: formData.members.length,
      revenue: parseFloat(formData.targetAmount) || 0,
      totalPayments: team.totalPayments,
      receivedPayments: team.receivedPayments,
      pending: parseFloat(formData.targetAmount) - team.receivedPayments,
    });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-fadeIn">
      <div className="bg-white rounded-2xl max-w-xl w-full p-6 relative shadow-2xl animate-slideUp">
        <button
          onClick={onClose}
          className="absolute -top-4 -right-4 bg-white text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-50 rounded-full shadow-lg"
        >
          <X className="w-5 h-5" />
        </button>

        <div className="text-center mb-6">
          <div className="inline-flex items-center justify-center w-12 h-12 bg-emerald-100 rounded-full mb-4">
            <Users className="w-6 h-6 text-emerald-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900">Modify Team</h2>
          <p className="text-gray-500 mt-1">Update team information</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-6">
            <div className="relative">
              <Building2 className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <input
                type="text"
                required
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200"
                placeholder="Enter team name"
              />
            </div>

            <div className="space-y-4">
              <div className="bg-gray-50 rounded-xl p-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <UserPlus className="w-5 h-5" />
                    Team Members
                  </h3>
                  <span className="text-sm text-gray-500">
                    Selected: {formData.members.length}
                  </span>
                </div>
                <select
                  multiple
                  value={formData.members}
                  onChange={(e) =>
                    setFormData({
                      ...formData,
                      members: Array.from(e.target.selectedOptions, (option) => option.value),
                    })
                  }
                  className="w-full px-4 py-3 bg-white border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 h-48"
                >
                  {mockUsers.map((user) => (
                    <option key={user.id} value={user.id}>
                      {user.name}
                    </option>
                  ))}
                </select>
                <p className="mt-2 text-sm text-gray-500 flex items-center gap-1">
                  <span className="text-emerald-500">Tip:</span>
                  Hold Ctrl/Cmd to select multiple members
                </p>
              </div>
            </div>

            <div className="relative">
              <Target className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
              <div className="relative">
                <DollarSign className="absolute left-3 top-3.5 w-5 h-5 text-gray-400" />
                <input
                  type="number"
                  required
                  min="0"
                  step="1000"
                  value={formData.targetAmount}
                  onChange={(e) => setFormData({ ...formData, targetAmount: e.target.value })}
                  className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200"
                  placeholder="Enter target amount"
                />
              </div>
            </div>
          </div>

          <div className="flex justify-end items-center gap-3 pt-6 border-t border-gray-100">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2.5 text-gray-600 hover:text-gray-800 transition-all duration-200"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-6 py-2.5 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
            >
              Update Team
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

function DeleteTeamModal({ isOpen, onClose, onDelete, team }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-fadeIn">
      <div className="bg-white rounded-2xl max-w-md w-full p-6 relative shadow-2xl animate-slideUp">
        <button
          onClick={onClose}
          className="absolute -top-4 -right-4 bg-white text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-50 rounded-full shadow-lg"
        >
          <X className="w-5 h-5" />
        </button>

        <div className="text-center mb-6">
          <div className="inline-flex items-center justify-center w-12 h-12 bg-red-100 rounded-full mb-4">
            <AlertTriangle className="w-6 h-6 text-red-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900">Delete Team</h2>
          <p className="text-gray-500 mt-2">
            Are you sure you want to delete "{team?.name}"? This action cannot be undone.
          </p>
        </div>

        <div className="flex justify-end items-center gap-3 pt-6 border-t border-gray-100">
          <button
            onClick={onClose}
            className="px-6 py-2.5 text-gray-600 hover:text-gray-800 transition-all duration-200"
          >
            Cancel
          </button>
          <button
            onClick={() => {
              onDelete(team.id);
              onClose();
            }}
            className="px-6 py-2.5 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
          >
            Delete Team
          </button>
        </div>
      </div>
    </div>
  );
}

function Teams() {
  const [teams, setTeams] = useState([
    {
      id: '1',
      name: 'Development Team',
      memberCount: 8,
      revenue: 120000,
      totalPayments: 95000,
      receivedPayments: 85000,
      pending: 10000,
      progress: 85,
    },
    {
      id: '2',
      name: 'Design Team',
      memberCount: 5,
      revenue: 85000,
      totalPayments: 65000,
      receivedPayments: 60000,
      pending: 5000,
      progress: 92,
    },
  ]);

  const [searchQuery, setSearchQuery] = useState('');
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isModifyModalOpen, setIsModifyModalOpen] = useState(false);
  const [selectedTeam, setSelectedTeam] = useState(null);

  const filteredTeams = teams.filter(team => 
    team.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const handleDeleteTeam = (teamId) => {
    setTeams(teams.filter(team => team.id !== teamId));
  };

  const handleModifyTeam = (teamId, updatedTeam) => {
    setTeams(teams.map(team => 
      team.id === teamId 
        ? { 
            ...team, 
            ...updatedTeam,
            progress: Math.floor((updatedTeam.receivedPayments / updatedTeam.revenue) * 100)
          }
        : team
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold text-gray-900">Teams Overview</h1>
            <p className="mt-2 text-gray-600">Manage and monitor your team performance</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="relative">
              <input
                type="text"
                placeholder="Search teams..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-64 pl-10 pr-4 py-2 bg-white bg-opacity-90 backdrop-blur-sm border border-gray-200 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              />
              <Search className="absolute left-3 top-2.5 w-5 h-5 text-gray-400" />
            </div>
          </div>
        </div>

        <div className="flex flex-wrap gap-4 mb-8">
          <button
            onClick={() => setIsAddModalOpen(true)}
            className="flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-full hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
          >
            <Plus className="w-5 h-5 mr-2" />
            Add Team
          </button>
          <button
            onClick={() => {
              if (teams.length > 0) {
                setSelectedTeam(teams[0]);
                setIsDeleteModalOpen(true);
              }
            }}
            className="flex items-center px-6 py-3 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-full hover:from-red-700 hover:to-red-800 transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
          >
            <Trash2 className="w-5 h-5 mr-2" />
            Delete Team
          </button>
          <button
            onClick={() => {
              if (teams.length > 0) {
                setSelectedTeam(teams[0]);
                setIsModifyModalOpen(true);
              }
            }}
            className="flex items-center px-6 py-3 bg-gradient-to-r from-emerald-600 to-emerald-700 text-white rounded-full hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
          >
            <Edit3 className="w-5 h-5 mr-2" />
            Modify Team
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredTeams.map((team) => (
            <div
              key={team.id}
              className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden"
            >
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-2xl font-bold text-gray-900">{team.name}</h3>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => {
                        setSelectedTeam(team);
                        setIsModifyModalOpen(true);
                      }}
                      className="p-2 text-emerald-600 hover:bg-emerald-50 rounded-full transition-colors"
                    >
                      <Edit3 className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => {
                        setSelectedTeam(team);
                        setIsDeleteModalOpen(true);
                      }}
                      className="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                    <div className="flex items-center bg-blue-50 px-3 py-1 rounded-full">
                      <Users className="w-4 h-4 text-blue-600 mr-1" />
                      <span className="text-blue-600 font-medium">{team.memberCount}</span>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-xl">
                    <div className="flex items-center">
                      <TrendingUp className="w-5 h-5 text-emerald-600 mr-3" />
                      <span className="text-gray-600">Revenue</span>
                    </div>
                    <span className="font-semibold text-gray-900">{formatCurrency(team.revenue)}</span>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-3 bg-emerald-50 rounded-xl">
                      <div className="flex items-center mb-2">
                        <DollarSign className="w-4 h-4 text-emerald-600 mr-2" />
                        <span className="text-sm text-emerald-600">Received</span>
                      </div>
                      <span className="text-lg font-semibold text-gray-900">
                        {formatCurrency(team.receivedPayments)}
                      </span>
                    </div>

                    <div className="p-3 bg-orange-50 rounded-xl">
                      <div className="flex items-center mb-2">
                        <HourglassIcon className="w-4 h-4 text-orange-600 mr-2" />
                        <span className="text-sm text-orange-600">Pending</span>
                      </div>
                      <span className="text-lg font-semibold text-gray-900">
                        {formatCurrency(team.pending)}
                      </span>
                    </div>
                  </div>

                  <div className="mt-4">
                    <div className="flex justify-between mb-2">
                      <span className="text-sm text-gray-600">Progress</span>
                      <span className="text-sm font-medium text-gray-900">{team.progress}%</span>
                    </div>
                    <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-blue-500 to-blue-600 transition-all duration-300"
                        style={{ width: `${team.progress}%` }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <AddTeamModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onAddTeam={(team) => {
          setTeams([...teams, { 
            ...team, 
            id: String(teams.length + 1),
            progress: Math.floor((team.receivedPayments / team.revenue) * 100) || 0
          }]);
          setIsAddModalOpen(false);
        }}
      />

      <DeleteTeamModal
        isOpen={isDeleteModalOpen}
        onClose={() => {
          setIsDeleteModalOpen(false);
          setSelectedTeam(null);
        }}
        onDelete={handleDeleteTeam}
        team={selectedTeam}
      />

      <ModifyTeamModal
        isOpen={isModifyModalOpen}
        onClose={() => {
          setIsModifyModalOpen(false);
          setSelectedTeam(null);
        }}
        onModify={handleModifyTeam}
        team={selectedTeam}
      />
    </div>
  );
}

export default Teams;